#include<bits/stdc++.h>
using namespace std;

class Node{

	private:

	// abhi kuch kaam nahi hain mera

	public :

	int data;
	Node* prev;
	Node* next;

	Node(int d){
		this->data=d;
		this->prev=NULL;
		this->next=NULL;
	}
	~Node(){
		if(next != NULL){
			delete next;
			next=NULL;
		}

	}
};
// traversing
void print(Node* &head){
	Node* temp =head;

	while(temp!=NULL){
		cout<<temp->data<<" ";
		temp= temp->next;
	}
	cout<<endl;
}
// lenght of linked list
int getlen(Node* &head){
	Node* temp =head;
	int length =0;
	while(temp!=NULL){
		length++;
		temp= temp->next;
	}
	return length;
}

void insert_at_head(Node*&tail,Node*&head,int d){

	if(head == NULL) {
        Node* temp = new Node(d);
        head = temp;
        tail = temp;
    }
    else{
        Node* temp = new Node(d);
        temp -> next = head;
        head -> prev = temp;
        head = temp;
    }
}

void insert_at_tail(Node*&tail,Node*&head,int d){

	if(tail == NULL) {
        Node* temp = new Node(d);
        tail = temp;
        head = temp;
    }
    else{
        Node* temp = new Node(d);
        tail -> next  = temp;
        temp -> prev = tail;
        tail = temp;
    }
}

void insert_at_middle(Node*&head,Node*&tail,int position,int d){
	if(position==1){
		insert_at_head(tail,head,d);
		return;
	}

	Node* temp=head;
	int count=1;
	while(count<position-1){
		temp=temp->next;
		count++;
	}

	if(temp->next==NULL){
		insert_at_tail(tail,head,d);
		return;
	}

	Node* temp2=new Node(d);

	temp2->next=temp->next;
	temp->next->prev=temp2;
	temp->next=temp2;
	temp2->prev=temp;

}

void Delete(Node*&head,Node*&tail,int position){

	if(position==1){
		Node*temp=head;
		temp->next->prev=NULL;
		head=temp->next;
		temp->next=NULL;
		delete temp;
	}
	else{
		Node*cur=head;
		Node*pre=NULL;

		int count=1;
		while(count<position){
			pre=cur;
			cur=cur->next;
			count++;
		}

		cur->prev=NULL;
		pre->next=cur->next;
		cur->next=NULL;
		delete cur;
	}
}

 
int main(){

	Node* node1= new Node(10);
	Node* head= node1;
	Node* tail=node1;
	insert_at_head(tail,head,30);
	insert_at_middle(head,tail,1,20);
	 Delete(head,tail,3);
	print(head);
	

	return 0;
}
