#include<bits/stdc++.h>
using namespace std;

class Node{

	private:

	// abhi kuch kaam nahi hain mera

	public :

	int data;
	Node* next;

	Node(int d){
		this->data=d;
		this->next=NULL;
	}
	~Node(){
		if(this->next != NULL){
			delete next;
			next=NULL;
		}

	}
};

void insertnode(Node*&tail,int element,int d){
	if(tail==NULL){
		Node*newnode= new Node(d);
		tail=newnode;
		newnode->next=newnode;
	}
	else{
		Node* curr=tail;

		while(curr->data!=element){
			curr=curr->next;
		}

		Node* temp=new Node(d);
		temp->next=curr->next;
		curr->next=temp;

	}
}

void print(Node* &tail) {
    Node* temp  = tail ;

    do{
        cout << tail -> data << " ";
        tail  = tail -> next;
    }while(tail!= temp);
    cout << endl;
}

void deleteNode(Node* &tail, int value) {

    //empty list
    if(tail == NULL) {
        cout << " List is empty, please check again" << endl;
        return;
    }
    else{
        //non-empty

        //assuming that "value" is present in the Linked List
        Node* prev = tail;
        Node* curr = prev -> next;

        while(curr -> data != value) {
            prev = curr;
            curr = curr -> next;
        }

        prev -> next = curr -> next;

        //1 Node Linked List
        if(curr == prev) {
            tail = NULL;
        }

        //>=2 Node linked list
        else if(tail == curr ) {
            tail = prev;
        }

        curr -> next = NULL;
        delete curr;

    }

}

bool isCircularList(Node* head) {
    //empty list
    if(head == NULL) {
        return true;
    }

    Node* temp = head -> next;
    while(temp != NULL && temp != head ) {
        temp = temp -> next;
    }

    if(temp == head ) {
        return true;
    }

    return false;

}

bool detectLoop(Node* head) {

    if(head == NULL)
        return false;

    map<Node*, bool> visited;

    Node* temp = head;

    while(temp !=NULL) {

        //cycle is present
        if(visited[temp] == true) {
            return true;
        }

        visited[temp] = true;
        temp = temp -> next;

    }
    return false;

}
 
int main(){

	Node* tail = NULL;
	insertnode(tail,5,3);
	insertnode(tail,3,4);
	
	print(tail);

	return 0;
}
