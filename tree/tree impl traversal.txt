#include <bits/stdc++.h>
using namespace std;

class node
{
public:
	int data;
	node *left;
	node *right;

	node(int d)
	{
		this->data = d;
		this->left = NULL;
		this->right = NULL;
	}
};
node *builttree(node *root)
{

	cout << "enter the data" << endl;
	int data;
	cin >> data;
	root = new node(data);

	if (data == -1)
	{
		return NULL;
	}

	cout << "enter the data for inserting in left" << data << endl;
	root->left = builttree(root->left);
	cout << "enter the data for inserting in right" << data << endl;
	root->right = builttree(root->right);
	return root;
}

void levelordertraversal(node *root)
{
	queue<node *> q;

	q.push(root);
	q.push(NULL);

	while (!q.empty()){
		node *temp = q.front();
		

		q.pop();

		if (temp == NULL){
			cout << endl;
			if(!q.empty()){
				q.push(NULL);
			}
		}
		else{
			cout << temp->data << " ";
			if (temp->left){
				q.push(temp->left);
			}
			if (temp->right){
				q.push(temp->right);
			}
		}
	}
}


void inorder( node* root){
	if(root==NULL){
		return;
	}
	inorder(root->left);
	cout<<root->data<<" ";
	inorder(root->right);
}

void preorder( node* root){
	if(root==NULL){
		return;
	}
	cout<<root->data<<" ";
	preorder(root->left);
	preorder(root->right);
}

void postorder( node* root){
	if(root==NULL){
		return;
	}
	
	postorder(root->left);
	postorder(root->right);
	cout<<root->data<<" ";
}

void levelordertraversal_tree(node* root){

	queue<node*> q;
	cout<<"enter the data"<<endl;
	int data;;
	cin>>data;
	root = new node(data);
	q.push(root);

	while(!q.empty()){

		node* temp = q.front();
		q.pop();

		cout<<"enter the data for left node"<<temp->data<<endl;
		int leftdata;
		cin>>leftdata;

		if(leftdata != -1){
			temp ->left=new node(leftdata);
			q.push(temp->left);
		}

		cout<<"enter the data for right node"<<temp->data<<endl;
		int rightdata;
		cin>>rightdata;

		if(rightdata != -1){
			temp ->right=new node(rightdata);
			q.push(temp->right);
		}
	}
}

int main()
{

	node *root = NULL;

	root = builttree(root);

	//levelordertraversal(root);

	postorder(root);

	return 0;
}

//1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1 
