class Solution {
public:

    int find_position(vector<int>inorder,int element,int n){

        for(int i=0;i<n;i++){
            if(inorder[i]==element){
                return i;
            }
        }
        return -1;
    }

    TreeNode* solve(vector<int>& preorder, vector<int>& inorder,int &preindex,int inindexstart,int inindexend,int n){

        if(preindex >=n || inindexstart > inindexend ){
            return NULL;
        }

        int element =preorder[preindex++];
        TreeNode* root= new TreeNode(element);

        int position= find_position(inorder,element,n);

        root->left=solve(preorder,inorder,preindex,inindexstart,position-1,n);
        root->right=solve(preorder,inorder,preindex,position+1,inindexend,n);

        return root;

    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {

        int preindex=0;
      

        int n=inorder.size();

        TreeNode* ans=solve(preorder,inorder,preindex,0,n-1,n);

        return ans;



        
        
    }
};